[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\maabd\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\maabd\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.7.2 (Oracle Corporation Java 1.8.0_341)
[debug]       Load.loadUnit: plugins took 197.7304ms
[debug]       Load.loadUnit: defsScala took 0.6735ms
[debug] [Loading] Scanning directory C:\Users\maabd\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\maabd\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 177.6143 ms
[debug]           Load.resolveProject(global-plugins) took 86.8879ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\maabd\.sbt\1.0\plugins, plugins: List(<none>))) took 311.3847ms
[debug] [Loading] Done in C:\Users\maabd\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 348.3386ms
[debug]       Load.loadUnit: cleanEvalClasses took 1.1934ms
[debug]     Load.loadUnit(file:/C:/Users/maabd/.sbt/1.0/plugins/, ...) took 561.89ms
[debug]   Load.apply: load took 835.3864ms
[debug]   Load.apply: resolveProjects took 7.0433ms
[debug]   Load.apply: finalTransforms took 102.7756ms
[debug]   Load.apply: config.delegates took 12.5309ms
[debug]   Load.apply: Def.make(settings)... took 682.5694ms
[debug]   Load.apply: structureIndex took 162.1892ms
[debug]   Load.apply: mkStreams took 3.1602ms
[info] loading global plugins from C:\Users\maabd\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3989.5321ms
[debug]           Load.loadUnit: plugins took 38.0571ms
[debug]           Load.loadUnit: defsScala took 0.0071ms
[debug] [Loading] Scanning directory C:\Users\maabd\IdeaProjects\TrainingProgram\project
[debug]             Load.loadUnit: mkEval took 16.9107ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\maabd\IdeaProjects\TrainingProgram\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 6.0547 ms
[info] loading settings for project trainingprogram-build from idea.sbt ...
[debug]               Load.resolveProject(trainingprogram-build) took 14.0199ms
[debug]             Load.loadTransitive: finalizeProject(Project(id trainingprogram-build, base: C:\Users\maabd\IdeaProjects\TrainingProgram\project, plugins: List(<none>))) took 21.5802ms
[debug] [Loading] Done in C:\Users\maabd\IdeaProjects\TrainingProgram\project, returning: (trainingprogram-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3874.2708ms
[debug]           Load.loadUnit: cleanEvalClasses took 8.7035ms
[debug]         Load.loadUnit(file:/C:/Users/maabd/IdeaProjects/TrainingProgram/project/, ...) took 3922.7657ms
[debug]       Load.apply: load took 3924.8605ms
[debug]       Load.apply: resolveProjects took 0.1596ms
[debug]       Load.apply: finalTransforms took 19.5264ms
[debug]       Load.apply: config.delegates took 0.8654ms
[debug]       Load.apply: Def.make(settings)... took 163.6676ms
[debug]       Load.apply: structureIndex took 46.4906ms
[debug]       Load.apply: mkStreams took 0.0044ms
[info] loading project definition from C:\Users\maabd\IdeaProjects\TrainingProgram\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 7811.0946ms
[debug]     Load.loadUnit: defsScala took 0.0051ms
[debug] [Loading] Scanning directory C:\Users\maabd\IdeaProjects\TrainingProgram
[debug]       Load.loadUnit: mkEval took 0.4197ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.4076 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 50.8184ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\maabd\IdeaProjects\TrainingProgram, plugins: List(<none>))) took 58.0337ms
[debug] [Loading] Done in C:\Users\maabd\IdeaProjects\TrainingProgram, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2660.8091ms
[debug]     Load.loadUnit: cleanEvalClasses took 34.4408ms
[debug]   Load.loadUnit(file:/C:/Users/maabd/IdeaProjects/TrainingProgram/, ...) took 10507.562ms
[debug] Load.apply: load took 10509.8789ms
[debug] Load.apply: resolveProjects took 0.2154ms
[debug] Load.apply: finalTransforms took 42.4868ms
[debug] Load.apply: config.delegates took 0.6742ms
[debug] Load.apply: Def.make(settings)... took 116.5929ms
[debug] Load.apply: structureIndex took 38.01ms
[debug] Load.apply: mkStreams took 0.0054ms
[info] set current project to TrainingProgram (in build file:/C:/Users/maabd/IdeaProjects/TrainingProgram/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 49845 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 49845, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to TrainingProgram (in build file:/C:/Users/maabd/IdeaProjects/TrainingProgram/)
[debug] > Exec(idea-shell, None, None)
